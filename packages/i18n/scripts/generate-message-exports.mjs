import { promises as fs } from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const ROOT_DIR = path.resolve(__dirname, '..');
const MESSAGES_DIR = path.join(ROOT_DIR, 'messages');
const SRC_DIR = path.join(ROOT_DIR, 'src');
const OUTPUT_FILE = path.join(SRC_DIR, 'generated/messages.ts');

async function loadMessages(locale) {
  const filePath = path.join(MESSAGES_DIR, `${locale}.json`);
  const raw = await fs.readFile(filePath, 'utf8');
  return JSON.parse(raw);
}

function escapeTemplateLiteral(value) {
  return value.replace(/`/g, '\\`').replace(/\$\{/g, '\\${');
}

async function generate() {
  await fs.mkdir(path.dirname(OUTPUT_FILE), { recursive: true });

  const enMessages = await loadMessages('en');
  const bgMessages = await loadMessages('bg');
  const keys = Object.keys({ ...bgMessages, ...enMessages }).sort();

  const header = `// AUTO-GENERATED FILE. DO NOT EDIT.
// Generated by scripts/generate-message-exports.mjs

import { createMessage } from '../runtime';
import type { MessageFunction } from '../runtime';

`;

  const typeDef = `export type MessageKey = ${keys.map(key => `'${key}'`).join(' | ')};\n\n`;

  const mapEntries = keys
    .map(key => {
      const fallback = enMessages[key] ?? bgMessages[key] ?? key;
      return `  '${key}': createMessage('${key}', \`${escapeTemplateLiteral(fallback)}\`),`;
    })
    .join('\n');

  const mapSection = `const messageFunctions: Record<MessageKey, MessageFunction> = {\n${mapEntries}\n};\n\n`;

  const exportFunctions = keys
    .map(key => `export const ${key} = messageFunctions['${key}'];`)
    .join('\n');

  const helpers = `export const messages = messageFunctions;\nexport const m = messageFunctions;\n\nexport function getMessage(key: MessageKey): MessageFunction {\n  return messageFunctions[key];\n}\n`;

  const content = header + typeDef + mapSection + helpers + '\n' + exportFunctions + '\n';

  await fs.writeFile(OUTPUT_FILE, content, 'utf8');
}

generate().catch(error => {
  console.error('[i18n] Failed to generate message exports:', error);
  process.exitCode = 1;
});

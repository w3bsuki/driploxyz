name: Dependabot Auto-Merge

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: write
  pull-requests: write
  checks: read

jobs:
  dependabot:
    name: Auto-merge Dependabot PRs
    runs-on: ubuntu-latest
    if: github.actor == 'dependabot[bot]'
    steps:
      - name: Dependabot metadata
        id: metadata
        uses: dependabot/fetch-metadata@v2
        with:
          github-token: "${{ secrets.GITHUB_TOKEN }}"

      - name: Check if PR is ready for merge
        id: check-pr
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const pull_number = context.issue.number;
            
            // Get PR details
            const { data: pr } = await github.rest.pulls.get({
              owner,
              repo,
              pull_number
            });
            
            console.log(`PR #${pull_number}: ${pr.title}`);
            console.log(`State: ${pr.state}, Mergeable: ${pr.mergeable}, Draft: ${pr.draft}`);
            
            // Check if PR is ready
            if (pr.state !== 'open' || pr.draft || pr.mergeable === false) {
              console.log('PR is not ready for merge');
              return false;
            }
            
            // Get check runs
            const { data: checkRuns } = await github.rest.checks.listForRef({
              owner,
              repo,
              ref: pr.head.sha
            });
            
            console.log(`Found ${checkRuns.check_runs.length} check runs`);
            
            // Check if all required checks passed
            const failedChecks = checkRuns.check_runs.filter(check => 
              check.status === 'completed' && check.conclusion !== 'success' && check.conclusion !== 'neutral'
            );
            
            if (failedChecks.length > 0) {
              console.log(`Found ${failedChecks.length} failed checks:`, failedChecks.map(c => c.name));
              return false;
            }
            
            const pendingChecks = checkRuns.check_runs.filter(check => 
              check.status !== 'completed'
            );
            
            if (pendingChecks.length > 0) {
              console.log(`Found ${pendingChecks.length} pending checks:`, pendingChecks.map(c => c.name));
              return false;
            }
            
            console.log('All checks passed, PR is ready for merge');
            return true;

      - name: Auto-approve patch and minor updates
        if: |
          steps.check-pr.outputs.result == 'true' && 
          (steps.metadata.outputs.update-type == 'version-update:semver-patch' || 
           steps.metadata.outputs.update-type == 'version-update:semver-minor')
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const pull_number = context.issue.number;
            
            // Approve the PR
            await github.rest.pulls.createReview({
              owner,
              repo,
              pull_number,
              event: 'APPROVE',
              body: 'ðŸ¤– Auto-approved by Dependabot workflow for patch/minor update'
            });
            
            console.log(`Approved PR #${pull_number}`);

      - name: Auto-merge patch and minor updates
        if: |
          steps.check-pr.outputs.result == 'true' && 
          (steps.metadata.outputs.update-type == 'version-update:semver-patch' || 
           steps.metadata.outputs.update-type == 'version-update:semver-minor')
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const pull_number = context.issue.number;
            
            try {
              // Enable auto-merge
              await github.rest.pulls.merge({
                owner,
                repo,
                pull_number,
                commit_title: `Auto-merge dependabot PR #${pull_number}`,
                commit_message: `Merged by Dependabot auto-merge workflow\n\nUpdate type: ${context.payload.sender.login}\nDependency: ${{ steps.metadata.outputs.dependency-names }}`,
                merge_method: 'squash'
              });
              
              console.log(`Successfully merged PR #${pull_number}`);
              
              // Add success comment
              await github.rest.issues.createComment({
                owner,
                repo,
                issue_number: pull_number,
                body: 'ðŸ¤– **Auto-merged successfully!**\n\nThis patch/minor dependency update has been automatically merged after all checks passed.'
              });
              
            } catch (error) {
              console.log(`Failed to merge PR #${pull_number}:`, error.message);
              
              // Add failure comment
              await github.rest.issues.createComment({
                owner,
                repo,
                issue_number: pull_number,
                body: `ðŸ¤– **Auto-merge failed**\n\nCouldn't automatically merge this PR. Error: ${error.message}\n\nPlease merge manually once ready.`
              });
            }

      - name: Comment on major updates
        if: |
          steps.metadata.outputs.update-type == 'version-update:semver-major'
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const pull_number = context.issue.number;
            
            await github.rest.issues.createComment({
              owner,
              repo,
              issue_number: pull_number,
              body: `ðŸ¤– **Major version update detected**
              
              This is a major version update that requires manual review:
              - **Dependency:** ${{ steps.metadata.outputs.dependency-names }}
              - **Update type:** ${{ steps.metadata.outputs.update-type }}
              
              Please review the changelog and test thoroughly before merging.
              
              **Actions required:**
              - [ ] Review breaking changes
              - [ ] Update code if necessary
              - [ ] Run full test suite
              - [ ] Manual approval required`
            });

      - name: Label PR based on update type
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const pull_number = context.issue.number;
            const updateType = '${{ steps.metadata.outputs.update-type }}';
            
            let labels = ['dependencies', 'dependabot'];
            
            if (updateType.includes('patch')) {
              labels.push('patch');
            } else if (updateType.includes('minor')) {
              labels.push('minor');
            } else if (updateType.includes('major')) {
              labels.push('major', 'breaking-change');
            }
            
            await github.rest.issues.addLabels({
              owner,
              repo,
              issue_number: pull_number,
              labels: labels
            });

  security-updates:
    name: Security Updates
    runs-on: ubuntu-latest
    if: github.actor == 'dependabot[bot]'
    steps:
      - name: Dependabot metadata
        id: metadata
        uses: dependabot/fetch-metadata@v2
        with:
          github-token: "${{ secrets.GITHUB_TOKEN }}"

      - name: Handle security updates
        if: contains(steps.metadata.outputs.dependency-names, 'security') || steps.metadata.outputs.alert-state == 'OPEN'
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const pull_number = context.issue.number;
            
            await github.rest.issues.createComment({
              owner,
              repo,
              issue_number: pull_number,
              body: `ðŸš¨ **Security Update Detected**
              
              This PR addresses a security vulnerability:
              - **Dependency:** ${{ steps.metadata.outputs.dependency-names }}
              - **Alert State:** ${{ steps.metadata.outputs.alert-state }}
              
              **Priority: HIGH** - Please review and merge as soon as possible.
              
              **Security checklist:**
              - [ ] Verify the security fix
              - [ ] Test critical functionality  
              - [ ] Deploy to staging first
              - [ ] Monitor for issues post-deployment`
            });
            
            // Add security label
            await github.rest.issues.addLabels({
              owner,
              repo,
              issue_number: pull_number,
              labels: ['security', 'high-priority', 'dependencies']
            });
            
            // Request review from security team (if exists)
            try {
              await github.rest.pulls.requestReviewers({
                owner,
                repo,
                pull_number,
                team_reviewers: ['security-team']
              });
            } catch (error) {
              console.log('Security team not found, skipping review request');
            }